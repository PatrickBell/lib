<?php
/**
 * Disable SilverStripe's built in authentication module
 **/
//Authenticator::unregister('MemberAuthenticator');

/**
  * External Authentication server definitions
  * Change the parameters below to suit your authentication server, or disable 
  * this authentication method altogether
  */
Authenticator::register_authenticator('ExternalAuthenticator');

/**
 * This module has a debug option. The debug option is aimed at system 
 * administrators and/or webmasters. It shows the login process on a step
 * by step basis to aid in finding the right settings for the module.
 * The debug option will log the steps to a file. 
 *
 * KEEP THIS DISABLED ON PRODUCTION SYSTEMS. The option is turned off by 
 * default. Set to filename to enable
 *
 * A successful logon for the SSTRIPE driver (without user auto creation) looks 
 * like:
 *    [timestamp] - Starting process for user [userid]
 *    [timestamp] - [userid] - User with source [sourcename] found in database
 *    [timestamp] - [userid] - loading driver SSTRIPE
 *    [timestamp] - [userid] - executing authentication driver
 *    [timestamp] - [userid].sstripe - Logging on with an Administrator account(skip next 2 lines) -or-- 
 *                                     Searching for user with source [sourcename] in database
 *    [timestamp] - [userid].sstripe - User was found in database
 *    [timestamp] - [userid].sstripe - Password authentication succeeded
 *    [timestamp] - [userid] - authentication success
 *    [timestamp] - [uderid] - Process for user [userid] ended
 **/
//ExternalAuthenticator::setAuthDebug('/tmp/sstripe_debug.log');

/**
 * Next to the debug log, we can also create a logfile for auditing purposes
 * In this file only logon attempts are registered
 *
 * Set this option to false to disable (default) or a filename. Make sure the
 * file is writable by the webserver process
 **/
//ExternalAuthenticator::setAuditLogFile('/var/log/http/sstripe_audit.log');

/**
 * Silverstripe also has an internal table for auditing. You can enable or 
 * disable (default) usage of it. It works in parallel with setAuditLogFile
 **/
//ExternalAuthenticator::setAuditLogSStripe(true);

/** 
 * Create your authentication source
 * The SSTRIPE driver is mainly provided to make it possible to use the
 * built in silverstripe authentication method in a sequential check
 * of authentication sources, or to be able to remove one tab on the 
 * login page
 *
 * The external authenticator module adds some attributes to the user account
 * these attributes must be defined in the SilverStripe account, or else 
 * authentication fails. This means that e.g. existing accounts must be edited
 * to take advantage of the SSTRIPE driver. You may use a differnt ID than the 
 * E-mail address with this driver.
 *
 * You can create multiple sources with different of same types
 **/
ExternalAuthenticator::createSource('silverstripe','SSTRIPE','SilverStripe');

/**
 * For each source you may give a set of netmasks where the client should 
 * reside. This prevents exposing internal authentication sources on a 
 * website that is accessible from the outside. Any failed logins from outside 
 * the indicated IP ranges on accounts coupled to this source will never block
 * the account (see Member::lock_out_after_incorrect_logins)
 *
 * If no addresses are set all clients IPs are allowed. You can set either one
 * netmask, or an array of netmasks. The netmask may be given as a single IP or
 * as a.b.c.d/e or a.b.c.d/e.f.g.h
 **/ 
//ExternalAuthenticator::setValidAddress('silverstripe',array('192.168.0.0/24',
//                                                            '127.0.0.1',
//                                                            '172.16.0.129/255.255.255.128));
//ExternalAuthenticator::setValidAddress('silverstripe','127.0.0.1);

/**
 * Four pieces of information come into play when authenticating
 * 1) The User's mail address
 * 2) The authentication source
 * 3) The User's identification credential at the source. This can be the 
 *    username, or some other unique ID. This module calls it the 
 *    anchor 
 * 4) The password
 *
 * By default the user address is used for login. 
 * The mail address is always unique, so SilverStripe can determine the
 * authentication source and anchor to use for itself.
 * The user only needs to give his/hers mail address and password
 *
 * Optionally the anchor can be used for authentication. If this is set the
 * user needs to input the authentication source, the anchor and password
 * to logon.
 **/
//ExternalAuthentication::setUseAnchor(false); 

/**
 * How do we call a user ID?
 * This string is informational and will appear on the login page
 */
ExternalAuthenticator::setAnchorDesc('Email');

/**
 * If the authentication source does not have a mechanism to prevent password
 * disctionary attacks, we can use SilverStripes lockout mechanism.
 * Configuration for this also has to be set in the global config. You can also
 * do it here by uncommenting the next statement and defining the number of
 * failed logins you allow
 **/
//Member::lock_out_after_incorrect_logins(3);

/**
 * The statement to enable lock checking for this source. This functionality is
 * enabled by default
 **/
//ExternalAuthenticator::setAuthSSLock('silverstripe',true);


